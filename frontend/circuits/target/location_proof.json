{"noir_version":"1.0.0-beta.3+ceaa1986628197bd1170147f6a07f0f98d21030a","hash":16578442876062743090,"abi":{"parameters":[{"name":"latitude","type":{"kind":"field"},"visibility":"private"},{"name":"longitude","type":{"kind":"field"},"visibility":"private"},{"name":"timestamp","type":{"kind":"field"},"visibility":"private"}],"return_type":{"abi_type":{"kind":"boolean"},"visibility":"public"},"error_types":{"2920182694213909827":{"error_kind":"string","string":"attempt to subtract with overflow"}}},"bytecode":"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","debug_symbols":"1ZrdisIwEIXfJddeJDOZ/PgqyyJVqxRKlVoXFvHdt4pRNwvdCzvq3Jnm2O9DOjkiHtSynO/Xs6pZbXZq+nFQ9WZRdNWm6VcHpc+XdtuiOa12XdF2agouhIkqm2X/0ns8TtSqqks1deY4+RM2Ht0lbAKGf8LoYwpj1MNhJLpk8bR/i35OlBHqDe/s7XXyDrk3vs7bapvJ2CfLWHMNW6DhMLlkQSFm3vRsb3v7EN0DD60T6u3f2Xtg2MILn+/f3r1MfCcZo19o4/NzyDy7hUhjCpPxw+Fo0gMWTX4QGZAqjlLFrVRxkirupIp7qeJBqngUKg5aqrjU5gSpzQlSmxOkNidIbU6Q2pwgtTlBanPC480J2toU1pQDUHMDDDcAuAHIDbDcAOIGOG6A5wY8fkKAwTTIYIhyQGQGWM0NMNyAESYZAqQwasgByA2w3ADiBjhugOcGBG5AZAaQ5gaMMMkI/gqg/Ad2Am4AcgMsN2CESUa6Nhr6kAMcN2CESbaQvieDtT4HBG5AZAY4zQroF/O2qutqPbv/00F/+atoq2Jel5flat8s7na7723aSe/ftptFudy35elO573+9j8=","file_map":{"61":{"source":"// Advanced Zero-Knowledge Location Proof Circuit\n\n// Constants for location proof\n// Constants with scale factor to avoid decimals\nglobal PARIS_LAT: Field = 48_8566 / 10000;\nglobal PARIS_LON: Field = 2_3522 / 10000;\nglobal MAX_RADIUS: Field = 20;\n\n// Custom trigonometric approximations for Field\nfn sin(x: Field) -> Field {\n    let x2 = x * x;\n    x - (x * x2 / 6) + (x * x2 * x2 / 120)\n}\n\nfn cos(x: Field) -> Field {\n    // Approximation of cosine using Taylor series\n    let x_squared = x * x;\n    let term0 = 1;\n    let term2 = -(x_squared) / 2;\n    let term4 = (x_squared * x_squared) / 24;\n    term0 + term2 + term4\n}\n\n// Custom square root implementation for Field type\nfn custom_sqrt(x: Field) -> Field {\n    // Newton-Raphson method for square root approximation\n    let mut guess = x / 2;\n    // Only a few iterations needed for reasonable approximation\n    for _ in 0..5 {\n        guess = (guess + x / guess) / 2;\n    }\n    guess\n}\n\n// Degree to radian conversion\nfn deg_to_rad(deg: Field) -> Field {\n    let pi = 3141592653589793 / 1000000000000000;\n    deg * (pi / 180)\n}\n\n// Haversine distance calculation\nfn haversine_distance(\n    lat1: Field, \n    lon1: Field, \n    lat2: Field, \n    lon2: Field\n) -> Field {\n    let R = 6371; // Earth radius in km\n    \n    let dlat = deg_to_rad(lat2 - lat1);\n    let dlon = deg_to_rad(lon2 - lon1);\n    \n    let a = (\n        sin(dlat/2) * sin(dlat/2) + \n        cos(lat1) * cos(lat2) * \n        sin(dlon/2) * sin(dlon/2)\n    );\n    \n    let c = 2 * custom_sqrt(a);\n    \n    R * c\n}\n\n// Location proof verification\nfn verify_location_proof(\n    latitude: Field, \n    longitude: Field, \n    max_timestamp: Field\n) -> bool {\n    // Verify location relative to Paris\n    let distance = haversine_distance(\n        latitude, \n        longitude, \n        PARIS_LAT, \n        PARIS_LON\n    );\n    \n    // Constraints:\n    // 1. Maximum distance from Paris\n    // 2. Recent timestamp\n    \n    // Simplified constraints\n    // Cast to integers for comparison (Noir requirement)\n    let distance_i = distance as u64;\n    let max_radius_i = MAX_RADIUS as u64;\n    let is_within_radius = distance_i < max_radius_i;\n    \n    // For timestamp, ensure we're checking within valid range\n    let time_diff = 86400 as u64;\n    let current_time = max_timestamp as u64;\n    let past_time = if current_time > time_diff { current_time - time_diff } else { 0 };\n    let is_recent_timestamp = current_time > past_time;\n    \n    // Return the combined result\n    if is_within_radius & is_recent_timestamp { true } else { false }\n}\n\n// Main circuit entry point\npub fn main(\n    latitude: Field, \n    longitude: Field, \n    timestamp: Field\n) -> pub bool {\n    verify_location_proof(\n        latitude, \n        longitude, \n        timestamp\n    )\n}\n","path":"/mnt/c/__Workspace and Data__/Projet/AztecNoir/GeoPrivacy/frontend/circuits/src/main.nr"}},"names":["main"],"brillig_names":["directive_invert","directive_integer_quotient"]}