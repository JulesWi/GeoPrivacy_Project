name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
      deployments: write
    
    steps:
    - uses: actions/checkout@v3
    
    # Backend Tests
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
    
    - name: Install Backend Dependencies
      run: |
        cd src/backend
        npm ci
    
    - name: Run Backend Tests
      run: |
        cd src/backend
        npm test
    
    # Frontend Tests
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: 'frontend/package-lock.json'
    
    - name: Install Dependencies
      working-directory: ./frontend
      run: npm ci
    
    - name: Lint Code
      working-directory: ./frontend
      run: npm run lint
    
    - name: TypeScript Type Check
      working-directory: ./frontend
      run: npm run typecheck
    
    - name: Build Application
      working-directory: ./frontend
      run: npm run build
      env:
        NEXT_PUBLIC_APP_ENV: production
    
    # Noir Circuit Tests
    - name: Install Noir
      run: |
        set -e
        echo "Téléchargement du script d'installation de noirup..."
        curl -L -o noirup_install.sh https://raw.githubusercontent.com/noir-lang/noirup/main/install
        
        echo "Rendre le script d'installation de noirup exécutable..."
        chmod +x noirup_install.sh
        
        echo "Exécution du script d'installation de noirup..."
        # Nous nous attendons maintenant à ce qu'il s'installe dans $HOME/.nargo/bin
        ./noirup_install.sh > noirup_install_output.log 2>&1 || true
        
        echo "Sortie du script d'installation de noirup (noirup_install_output.log) :"
        cat noirup_install_output.log
        
        echo "Vérification de l'installation de noirup..."
        # Le chemin a changé de .noirup à .nargo pour l'exécutable noirup lui-même
        NOIRUP_EXECUTABLE_PATH="$HOME/.nargo/bin/noirup"
        if [ -f "$NOIRUP_EXECUTABLE_PATH" ]; then
          echo "L'exécutable noirup a été trouvé à $NOIRUP_EXECUTABLE_PATH."
        else
          echo "ERREUR: L'exécutable noirup N'A PAS été trouvé à $NOIRUP_EXECUTABLE_PATH."
          echo "Contenu de $HOME/.nargo/bin/ (si existant) :"
          ls -la "$HOME/.nargo/bin/" || echo "$HOME/.nargo/bin/ n'existe pas ou est vide."
          echo "Contenu de $HOME/.nargo/ (si existant) :"
          ls -la "$HOME/.nargo/" || echo "$HOME/.nargo/ n'existe pas ou est vide."
          # Par précaution, vérifions également l'ancien chemin .noirup
          echo "Vérification de l'ancien chemin $HOME/.noirup/bin/ (si existant) :"
          ls -la "$HOME/.noirup/bin/" || echo "$HOME/.noirup/bin/ n'existe pas ou est vide."
          echo "Vérification de l'ancien chemin $HOME/.noirup/ (si existant) :"
          ls -la "$HOME/.noirup/" || echo "$HOME/.noirup/ n'existe pas ou est vide."
          exit 1
        fi
        
        echo "Tentative de s'assurer que nargo est installé (implicitement ou via default)..."
        # La commande 'install' n'est plus valide pour noirup.
        # Nargo pourrait être installé par défaut, ou 'noirup default stable' pourrait s'en charger.
        
        echo "Installation de Nargo en exécutant noirup sans arguments..."
        "$NOIRUP_EXECUTABLE_PATH"
        
        echo "Ajout de nargo au GITHUB_PATH..."
        # Ce chemin est correct pour nargo lui-même après l'installation par noirup
        echo "$HOME/.nargo/bin" >> $GITHUB_PATH
        
        echo "Étape d'installation de Noir terminée."
    
    - name: Verify Noir Installation
      run: nargo --version
    
    - name: Compile and Test Noir Circuits
      run: |
        cd frontend
        npm run noir:compile
        npm test
    
    # Vercel Deployment
    - name: Deploy to Vercel
      uses: amondnet/vercel-action@v20
      with:
        vercel-token: ${{ secrets.VERCEL_TOKEN }}
        github-token: ${{ secrets.GITHUB_TOKEN }}
        vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
        vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
        working-directory: ./frontend
      timeout-minutes: 10